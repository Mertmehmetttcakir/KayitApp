import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.io.PrintWriter;


public class CustomerDetailsFrame extends JFrame {
    private JTable detailsTable;
    private DefaultTableModel model;
    private int selectedRow;
    private String selectedCustomerName;
    private DefaultTableModel detailsModel;


    public CustomerDetailsFrame(String customerName, DefaultTableModel mainModel, int selectedRow) {
        this.model = mainModel;
        this.selectedRow = selectedRow;
        this.selectedCustomerName = customerName;

        setTitle("Müşteri Detayları");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(600, 400);
        setLocationRelativeTo(null);

        String[] columnNames = {"Yapılan işin Tarihi", "Müşteri Adı", "Telefon Numarası", "Araç Bilgisi", "Yapılan İş", "Ücret Tutarı", "Ödenen Ücret", "Kalan ücret", "İndeks"};
        detailsModel = new DefaultTableModel(columnNames, 0);

        int totalAmount = 0;

        for (int i = 0; i < mainModel.getRowCount(); i++) {
            String currentCustomerName = (String) mainModel.getValueAt(i, 1);
            if (currentCustomerName.equals(selectedCustomerName)) {
                Object[] rowData = new Object[columnNames.length];
                for (int j = 0; j < columnNames.length; j++) {
                    rowData[j] = mainModel.getValueAt(i, j);
                }

                int debt = Integer.parseInt(rowData[5].toString()); // Ücret Tutarı
                String paidStr = rowData[6] != null ? rowData[6].toString() : "0"; // Null ise "0" olarak varsayılan değer kullanıyoruz.
                int paid = Integer.parseInt(paidStr);
                rowData[7] = debt - paid; // Kalan Ücret
                detailsModel.addRow(rowData);
                totalAmount += debt;
            }
        }

        detailsTable = new JTable(detailsModel);
        detailsTable.setFont(new Font("Monospaced", Font.PLAIN, 12));

        JScrollPane scrollPane = new JScrollPane(detailsTable);

        JLabel totalAmountLabel = new JLabel("Toplam Ücret: " + totalAmount);
        totalAmountLabel.setFont(new Font("SansSerif", Font.BOLD, 16));

        JButton payDebtButton = new JButton("Borç Öde");
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(totalAmountLabel);
        buttonPanel.add(payDebtButton);

        add(scrollPane, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
        payDebtButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRowIndex = detailsTable.getSelectedRow(); // Seçilen satırın indeksi

                if (selectedRowIndex != -1) { // Eğer bir satır seçildiyse devam edin
                    // Satır seçildiyse, bu satırdaki verileri alabilirsiniz.
                    String debtStr = detailsModel.getValueAt(selectedRowIndex, 5).toString();
                    int debt = Integer.parseInt(debtStr);

                    String paidStr = detailsModel.getValueAt(selectedRowIndex, 6).toString();
                    int paid = 0; // Başlangıçta ödenen miktarı 0 olarak ayarlayın.

                    if (!"null".equals(paidStr)) {
                        try {
                            paid = Integer.parseInt(paidStr);
                        } catch (NumberFormatException ex) {
                            // Geçersiz ödenen miktarı işlemek istiyorsanız burada bir hata mesajı gösterebilirsiniz.
                        }
                    }

                    String paymentAmountStr = JOptionPane.showInputDialog("Ödeme Miktarını Girin:");
                    if (paymentAmountStr != null && !paymentAmountStr.isEmpty()) {
                        try {
                            int paymentAmount = Integer.parseInt(paymentAmountStr);

                            if (paymentAmount <= debt) {
                                paid += paymentAmount;
                                detailsModel.setValueAt(paid, selectedRowIndex, 6);
                                detailsModel.setValueAt(debt - paid, selectedRowIndex, 7);

                                int totalPaidAmount = calculateTotalRemainingDebt(detailsModel);
                                totalAmountLabel.setText("Toplam Kalan Miktar: " + totalPaidAmount);

                                // Ana modeli güncelle (borç ödendiğinde ana modele de yansıt)
                                int mainModelIndex = (int) detailsModel.getValueAt(selectedRowIndex, 8); // İndeks sütunu (8. sütun)
                                for (int i = 0; i < mainModel.getRowCount(); i++) {
                                    if ((int) mainModel.getValueAt(i, 8) == mainModelIndex) {
                                        int currentPaid = Integer.parseInt(mainModel.getValueAt(i, 6).toString()); // Ödenen miktar sütunu (7. sütun)
                                        // int currentDebt = Integer.parseInt(mainModel.getValueAt(i, 7).toString()); // Borç sütunu (8. sütun)

                                        currentPaid += paymentAmount;
                                        mainModel.setValueAt(String.valueOf(currentPaid), i, 6); // Ödenen miktarı güncelle

                                        int updatedDebt = debt - paid;
                                        mainModel.setValueAt(String.valueOf(updatedDebt), i, 7); // Borcu güncelle

                                        break;
                                    }
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Ödeme miktarı borçtan fazla olamaz.", "Hata", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(null, "Geçersiz ödeme miktarı.", "Hata", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Lütfen bir iş seçin veya seçtiğiniz satır müşteriye ait değil.", "Hata", JOptionPane.ERROR_MESSAGE);
                }
                saveAllCustomerDetailsToTextFile(mainModel);
            }
        });



        setVisible(true);
    }
    private void saveAllCustomerDetailsToTextFile(DefaultTableModel mainModel) {
        try {
            PrintWriter writer = new PrintWriter("musteri_bilgileri.txt");
            for (int i = 0; i < mainModel.getRowCount(); i++) {
                StringBuilder line = new StringBuilder();
                for (int j = 0; j < mainModel.getColumnCount(); j++) {
                    line.append(mainModel.getValueAt(i, j));
                    if (j < mainModel.getColumnCount() - 1) {
                        line.append(",");
                    }
                }
                writer.println(line);
            }
            writer.close();
            JOptionPane.showMessageDialog(null, "Tüm müşteri detayları kaydedildi.", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Tüm müşteri detayları kaydedilirken bir hata oluştu.", "Hata", JOptionPane.ERROR_MESSAGE);
        }
    }


    private int calculateTotalRemainingDebt(DefaultTableModel detailsModel) {
        int totalRemainingDebt = 0;
        for (int i = 0; i < detailsModel.getRowCount(); i++) {
            int remainingDebt = Integer.parseInt(detailsModel.getValueAt(i, 7).toString());
            totalRemainingDebt += remainingDebt;
        }
        return totalRemainingDebt;
    }
}
